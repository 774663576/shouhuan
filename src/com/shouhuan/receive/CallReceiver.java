package com.shouhuan.receive;import java.lang.ref.WeakReference;import android.app.Service;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.media.AudioManager;import android.net.Uri;import android.provider.ContactsContract;import android.telephony.TelephonyManager;import android.text.TextUtils;import android.util.Log;import com.ble.ble_fastcode.bluetooth.WristBandDevice;import com.shouhuan.Util.SharedUtils;public class CallReceiver extends BroadcastReceiver {	public static final boolean D = true;	private final String TAG = this.getClass().getSimpleName();	private static String incomingNumber = null;	private static TelephonyManager manager;	private WeakReference<Context> mApp;	private TelephonyManager tm;	private AudioManager aManager;	private int ringModel;	@Override	public void onReceive(Context context, Intent intent) {		if (D)			Log.e(TAG, "+++ ON RECEIVE +++");		mApp = new WeakReference<Context>(context);		tm = (TelephonyManager) mApp.get().getSystemService(				Service.TELEPHONY_SERVICE);		aManager = (AudioManager) mApp.get().getSystemService(				Context.AUDIO_SERVICE);		switch (tm.getCallState()) {		// 响铃中		case TelephonyManager.CALL_STATE_RINGING:			incomingNumber = intent.getStringExtra("incoming_number");			Contact contact = getContact(context, incomingNumber);			if (!"".equals(contact.getDisplayName())					&& SharedUtils.getPhoneState()) {				/**				 * 将电话联系人发送到手环 如果电话本中显示名字，如果没有显示号码				 */				WristBandDevice.getInstance(context)						.writeWristBandPhoneAlertNew(context,								contact.getDisplayName());			}			break;		}	}	/**	 * 获取联系人	 * 	 * @param context	 * @param phoneNumber	 * @return	 */	public static Contact getContact(Context context, String phoneNumber) {		Contact contact = new Contact(phoneNumber);		if (TextUtils.isEmpty(phoneNumber)) {			contact.setDisplayName("");		}		Cursor cursor = null;		try {			// 查找号码，和姓名			// 查到显示姓名，没有查到显示号码			Uri uri = Uri.withAppendedPath(					ContactsContract.PhoneLookup.CONTENT_FILTER_URI,					Uri.encode(phoneNumber));			cursor = context.getContentResolver().query(					uri,					new String[] { ContactsContract.PhoneLookup.DISPLAY_NAME,							ContactsContract.PhoneLookup.TYPE,							ContactsContract.PhoneLookup.LABEL }, null, null,					ContactsContract.PhoneLookup.DISPLAY_NAME + " LIMIT 1");			while (cursor.moveToNext()) {				contact.setDisplayName(cursor.getString(cursor						.getColumnIndex(ContactsContract.PhoneLookup.DISPLAY_NAME)));				break;			}		} catch (Exception e) {			contact.setDisplayName(phoneNumber);		} finally {			if (cursor != null) {				cursor.close();			}		}		return contact;	}	public static class Contact {		private String number;		private String displayName;		public Contact(String phoneNumber) {			this.number = phoneNumber;			this.displayName = phoneNumber;		}		public String getNumber() {			return number;		}		public void setNumber(String number) {			this.number = number;		}		public String getDisplayName() {			return displayName;		}		public void setDisplayName(String displayName) {			this.displayName = displayName;		}	}}